// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: feeds.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createFeed = `-- name: CreateFeed :one
INSERT INTO feeds (name, url, user_id)
VALUES ($1,$2,$3) 
RETURNING id, created_at, updated_at, name, url, user_id
`

type CreateFeedParams struct {
	Name   string
	Url    string
	UserID uuid.UUID
}

func (q *Queries) CreateFeed(ctx context.Context, arg CreateFeedParams) (Feed, error) {
	row := q.db.QueryRowContext(ctx, createFeed, arg.Name, arg.Url, arg.UserID)
	var i Feed
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Url,
		&i.UserID,
	)
	return i, err
}

const getFeedByUrl = `-- name: GetFeedByUrl :one
SELECT id, created_at, updated_at, name, url, user_id FROM feeds 
WHERE url = $1
`

func (q *Queries) GetFeedByUrl(ctx context.Context, url string) (Feed, error) {
	row := q.db.QueryRowContext(ctx, getFeedByUrl, url)
	var i Feed
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Url,
		&i.UserID,
	)
	return i, err
}

const getFeedsWithUNames = `-- name: GetFeedsWithUNames :many
SELECT feeds.name, feeds.url, users.name FROM feeds
JOIN users ON user_id = users.id
`

type GetFeedsWithUNamesRow struct {
	Name   string
	Url    string
	Name_2 string
}

func (q *Queries) GetFeedsWithUNames(ctx context.Context) ([]GetFeedsWithUNamesRow, error) {
	rows, err := q.db.QueryContext(ctx, getFeedsWithUNames)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetFeedsWithUNamesRow
	for rows.Next() {
		var i GetFeedsWithUNamesRow
		if err := rows.Scan(&i.Name, &i.Url, &i.Name_2); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getLatestFeed = `-- name: GetLatestFeed :one
SELECT id, created_at, updated_at, name, url, user_id FROM feeds 
WHERE user_id = $1
ORDER BY created_at DESC 
LIMIT 1
`

func (q *Queries) GetLatestFeed(ctx context.Context, userID uuid.UUID) (Feed, error) {
	row := q.db.QueryRowContext(ctx, getLatestFeed, userID)
	var i Feed
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Url,
		&i.UserID,
	)
	return i, err
}
